!*******************************************************

 LOCAL GEOMETRY MODULE igs_128(
   VAR FILE infile,logfile;
   STRING   dl1*82,dl2*82;
   INT      ps_ptr;
   int      rowlgt;
   VAR REF  id_ent;
   VAR INT  status);

!*      Read Directory Entry Section and
!*      get values from Parameter Section
!*      and create a NURB surface    
!*
!*      In: infile  = File to read from
!*          logfile = logfilee.
!*          dl1     = Read 1st Directory Entry Section
!*          dl2     = Read 2nd Directory Entry Section
!*          ps_ptr  = Pointer to Parameter section
!*          rowlgt  = Row length used
!*
!*      Ut: status  = 0 => Ok
!*                   -1 => Fel
!*
!*      (C)microform ab 1997-12-23 J. Kjellander
!*      2006-09-13 transl to english, rowlgt, val->ival, 
!*                 added weights  S. Larsson, Örebro university               
!*
!*******************************************************

   CONSTANT INT MAXPTS=1000;
   INT    iu,iv,rownumber,p,pd;
   STRING rad*82,fs*82;
   FLOAT  f;
   INT    k1,k2,m1,m2,prop1,prop2,prop3,prop4,prop5,
          uflag,vflag;
   FLOAT  ku(MAXPTS),kv(MAXPTS),w(MAXPTS,MAXPTS);
   VECTOR cpts(MAXPTS,MAXPTS);

 BEGINMODULE

!*
!***Get rownumber in parameter data section and
!***position the file pointer.
!*
   rownumber:=ival(substr(dl1,9,8));
   seek(infile,ps_ptr+(rownumber-1)*rowlgt);
!*
!***Read 1:st row and remove '128'.
!*
   rad:=inlin(infile);
   rad:=substr(rad,finds(rad,",")+1);
!*
!***K1, no. of control points in U- direction.
!*
   part(#1,igs_gint(infile,rad,k1,status):SAVE=0);
   k1:=k1+1;
!*
!***K2, no. of control points in V- direction.
!*
   part(#2,igs_gint(infile,rad,k2,status):SAVE=0);
   k2:=k2+1;
!*
!***M1, degree in U-direction (order_u-1).
!*
   part(#3,igs_gint(infile,rad,m1,status):SAVE=0);
!*
!***M2, degree in V-direction (order_v-1).
!*
   part(#4,igs_gint(infile,rad,m2,status):SAVE=0);
   
!   lst_ini("128");
!   lst_lin("k1="+str(k1));
!   lst_lin("k2="+str(k2));
!   lst_lin("m1="+str(m1));
!   lst_lin("m2="+str(m2));
!   lst_lin("dl1="+dl1);
!   lst_lin("dl2="+dl2);
!   lst_exi(); exit("128");
!*
!***PROP1 - PROP5.
!*
   part(#5,igs_gint(infile,rad,prop1,status):SAVE=0);
   part(#6,igs_gint(infile,rad,prop2,status):SAVE=0);
   part(#7,igs_gint(infile,rad,prop3,status):SAVE=0);
   part(#8,igs_gint(infile,rad,prop4,status):SAVE=0);
   part(#9,igs_gint(infile,rad,prop5,status):SAVE=0);
!*
!***Knot vector in U-direction.
!*
   for iu:=1 to k1-m1+1+2*m1 do
     part(#10,igs_gflt(infile,rad,ku(iu),status):SAVE=0);
   endfor;
!*
!***Knot vector in V-direction.
!*
   for iv:=1 to k2-m2+1+2*m2 do
     part(#12,igs_gflt(infile,rad,kv(iv),status):SAVE=0);
   endfor;
!*
!***weights
!*
   for iv:=1 to k2 do
     for iu:=1 to k1 do
       part(#14,igs_gflt(infile,rad,w(iu,iv),status):SAVE=0);
     endfor;
   endfor;
!*
!***R3-coordinates.
!*
   for iv:=1 to k2 do
     for iu:=1 to k1 do
       part(#15,igs_gflt(infile,rad,cpts(iu,iv).x,status):SAVE=0);
       part(#16,igs_gflt(infile,rad,cpts(iu,iv).y,status):SAVE=0);
       part(#17,igs_gflt(infile,rad,cpts(iu,iv).z,status):SAVE=0);
     endfor;
   endfor;
   sur_nurbsarr(#50,m1+1,m2+1,k1-m1+1+2*m1,k2-m2+1+2*m2,cpts,ku,kv,w);
   id_ent:=global_ref(#50);        
!*
!**END.
!*
   status:=0;

 ENDMODULE

!*******************************************************************************