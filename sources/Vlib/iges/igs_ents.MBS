!*******************************************************

 MACRO MODULE igs_ents(
   VAR FILE   infile,logfile;
   INT        ps_ptr;
   INT        rowlgt;
   INT        n_lweight_grad;
   FLOAT      max_lweight;
   STRING     uselevels*1;
   STRING     usecolours*1;
   STRING     useblank*1;
   VAR INT    status);

!*      Reads Directory Entry Section a second time
!*      and creates the entities.
!*
!*      In:  ps_ptr = Ptr to Parameter Section.
!*      Out: status = 0 => Ok
!*                   -1 => Error.
!*
!*      (C)microform ab 1997-12-22 J. Kjellander
!*
!*      2006-09-20 rowlgt, J.Kjellander, Örebro university
!*
!*******************************************************

   CONSTANT INT MAXF=600;
   STRING       rad1*82,rad2*82,row1*82,row2*82,st*1;
   INT          i,typ,f(MAXF),fn,n_ok(MAXF),n_error(MAXF),n_notimpl(MAXF),n_blanked(MAXF),actpos;
   INT          levn,coln,subord,blankst,t_ptr;
   INT          ds_ptr;
   REF          id_ent,csysid;
   CONSTANT INT INDEPENDENT=0;
   FLOAT        lwidth;
   INT          lfontpat;
   INT          lftab(0:10);
   INT          usedlevels(0:1999);
   INT          notimpflag;

float rn; string s*1;

 BEGINMODULE

!*
!***Init.
!*
    for i:= 1 to MAXF do
      n_ok(i):=0;
      n_error(i):=0;
      n_notimpl(i):=0;
      n_blanked(i):=0;
    endfor;
    
    for i:= 0 to 1999 do
      usedlevels(i):=0;
    endfor;
    
    ds_ptr:=fpos(infile);
    lftab(0):=act_lfont();
    lftab(1):=0; !solid      -> solid
    lftab(2):=1; !dashed     -> dashed 
    lftab(3):=2; !phantom    -> centerline
    lftab(4):=2; !centerline -> centerline
    lftab(5):=1; !dotted     -> dashed
!*
!***HEADER.
!*
    outlin(logfile); outlin(logfile);
    outstr(logfile,"Directory Entry Section, pass 2");outlin(logfile);
    outstr(logfile,"(processing independent entities)"); outlin(logfile);
    outstr(logfile,"--------------------------------------------");outlin(logfile);
!*
!***Read 2 lines/entity. DE1 and DE2.
!*
!lst_ini("igs_ents");
loop:
rn:=fpos(infile);
rn:=rn/rowlgt;
!lst_lin("rowlgt="+str(rowlgt,-1,0));
!lst_lin("rad="+str(rn,-1,2));

    rad1:=inlin(infile);
    rad2:=inlin(infile);
    if substr(rad1,73,1) = "D" then             ! If not, we have reached end of DE section
!lst_lin(rad1);
!lst_lin(rad2);
!*
!***Levels.
!*
    IF uselevels="y" THEN 
       levn   :=ival(substr(rad1,33,8));       ! field 5, "level"
       IF levn<0 THEN
         levn:=act_level();
         outstr(logfile,"igs_ents, Definitions level property, not implemented, active is used");
         outlin(logfile);
         outstr(logfile,rad1); outlin(logfile);
         outstr(logfile,rad2); outlin(logfile);       
         outlin(logfile);       
       ENDIF;
       IF levn>1999 THEN
         levn:=act_level();
         outstr(logfile,"igs_ents, levels higher than 1999 is not supported by varkon, active is used");
         outlin(logfile);
         outstr(logfile,rad1); outlin(logfile);
         outstr(logfile,rad2); outlin(logfile);       
         outlin(logfile);       
       ENDIF;
    ELSE
       levn:= act_level();
    ENDIF;
!*
!***Colors.
!* 
    IF usecolours="y" THEN 
       coln   :=ival(substr(rad2,17,8));        ! field 13, "color number"
       IF coln=0 THEN coln:= act_pen(); ENDIF;  
       IF coln<0 THEN
         coln:=act_pen();
         outstr(logfile,"igs_ents, Color definition entity, not implemented, active is used");
         outlin(logfile);
         outstr(logfile,rad1); outlin(logfile);
         outstr(logfile,rad2); outlin(logfile);       
         outlin(logfile);       
       ENDIF;
       IF coln=0 THEN coln:= 1; ENDIF;
    ELSE
       coln:= act_pen();
    ENDIF;  
 !*
 !***Blank.
 !*
    IF useblank="y" THEN 
       blankst:=ival(substr(rad1,65,2));        ! field 9, pos 1 and 2
       IF blankst=0 THEN blankst:= act_blank(); ENDIF; !
    ELSE
       blankst:= act_blank();
    ENDIF;    
!*
!***Extract more data from DE1 and DE2.
!*
    subord :=ival(substr(rad1,67,2));           ! field 9, pos 3 and 4
    typ    :=ival(rad1);                        ! field 1, "entity type number"
    lwidth :=ival(substr(rad2,9,8));            ! field 12, "line weight"
    lfontpat:=ival(substr(rad1,25,8));          ! field 47, "line font pattern"
    IF lfontpat<0 THEN
       lfontpat:=0;
       outstr(logfile,"igs_ents, Line font definition property, not implemented, active is used");
       outlin(logfile);
       outstr(logfile,rad1); outlin(logfile);
       outstr(logfile,rad2); outlin(logfile);       
       outlin(logfile); 
    ENDIF;
    lwidth:=lwidth*(n_lweight_grad/max_lweight);
!*
!***Error check. DE1 and DE2 must have the same type.
!*
!   if typ <> ival(rad2) then

!lst_lin("actpos="+str(actpos,-1,0));
!lst_lin("fpos="+str(fpos(infile),-1,0));

!     exit("DE1 and DE2 type different !");
!   endif;
!*
!**Create local coordinate system for transformation matrix.
!*    
    csys_1p(#16,"LOCAL",vec(0,0,0),0,0,0:BLANK=1);    
    csysid:=#16;           
    t_ptr:=ival(substr(rad1,49,8));
    IF t_ptr<>0 THEN
      actpos:=fpos(infile);
      seek(infile,ds_ptr+(t_ptr-1)*rowlgt);  
      row1:=inlin(infile);
      row2:=inlin(infile);  
      part(#17,igs_124(infile,logfile,row1,row2,ps_ptr,rowlgt,csysid,status),csysid:SAVE=1,BLANK=1);
      seek(infile,actpos);
    ENDIF;
!*
!***Process only independent entities here, dependent entities will be
!***read by their parents.
!*
!lst_lin("typ="+str(typ,-1,0)+"  subord="+str(subord,-1,0));
    IF subord=INDEPENDENT AND typ<>124 THEN    ! Transformations are regarded as dependent.
       notimpflag:=0;
!*
!***0=Null entity
!*
        if typ = 0  then
          actpos:=fpos(infile);
          part(#1,igs_0(infile,logfile,rad1,rad2,ps_ptr,rowlgt,id_ent,status),csysid:
                          SAVE=1,PEN=coln,LEVEL=levn,BLANK=blankst);
          seek(infile,actpos);
          if status = 0 then
            n_ok(typ):=n_ok(typ)+1;
          else
            n_error(typ):=n_error(typ)+1;
          endif;
!*
!***100=Circular arc
!*
        elif typ = 100  then
          actpos:=fpos(infile);
          part(#2,igs_100(infile,logfile,rad1,rad2,ps_ptr,rowlgt,id_ent,status),csysid:
                  SAVE=1,PEN=coln,LEVEL=levn,BLANK=blankst,AFONT=lftab(lfontpat));
          seek(infile,actpos);
          if status = 0 then
            n_ok(typ):=n_ok(typ)+1;
          else
            n_error(typ):=n_error(typ)+1;
          endif;    
!*
!***102=Composite curve
!*
        elif typ = 102  then
          actpos:=fpos(infile);
          part(#3,igs_102(infile,logfile,rad1,rad2,ds_ptr,ps_ptr,rowlgt,id_ent,status),csysid:
                          SAVE=1,PEN=coln,LEVEL=levn,BLANK=blankst);
          seek(infile,actpos);
          if status = 0 then
            n_ok(typ):=n_ok(typ)+1;
          else
            n_error(typ):=n_error(typ)+1;
          endif;   
!*
!***104=Conic sections
!*
        elif typ = 104  then
          actpos:=fpos(infile);
          part(#20,igs_104(infile,logfile,rad1,rad2,ps_ptr,rowlgt,id_ent,status),csysid:
                          SAVE=1,PEN=coln,LEVEL=levn,BLANK=blankst);
          seek(infile,actpos);
          if status = 0 then
            n_ok(typ):=n_ok(typ)+1;
          else
            n_error(typ):=n_error(typ)+1;
          endif;
!*
!***106=Copious data
!*
        elif typ = 106  then
          actpos:=fpos(infile);
          part(#5,igs_106(infile,logfile,rad1,rad2,ps_ptr,rowlgt,id_ent,status),csysid:
                          SAVE=1,PEN=coln,LEVEL=levn,BLANK=blankst);
          seek(infile,actpos);
          if status = 0 then
            n_ok(typ):=n_ok(typ)+1;
          else
            n_error(typ):=n_error(typ)+1;
          endif;
!*
!***108=plane
!*
        elif typ = 108  then
          actpos:=fpos(infile);
          part(#6,igs_108(infile,logfile,rad1,rad2,ds_ptr,ps_ptr,rowlgt,id_ent,status),csysid:
                          SAVE=1,PEN=coln,LEVEL=levn,BLANK=blankst);
          seek(infile,actpos);
          if status = 0 then
            n_ok(typ):=n_ok(typ)+1;
          else
            n_error(typ):=n_error(typ)+1;
          endif;
!*
!***110=Line
!*
        elif typ = 110  then
          actpos:=fpos(infile);
          part(#7,igs_110(infile,logfile,rad1,rad2,ps_ptr,rowlgt,id_ent,status),csysid:
                  SAVE=1,PEN=coln,LEVEL=levn,BLANK=blankst,LFONT=lftab(lfontpat));
          seek(infile,actpos);
          if status = 0 then
            n_ok(typ):=n_ok(typ)+1;
          else
            n_error(typ):=n_error(typ)+1;
          endif;
!*
!***112=Parametric Spline 
!*
        elif typ = 112  then
          actpos:=fpos(infile);
          part(#88,igs_112(infile,logfile,rad1,rad2,ps_ptr,rowlgt,id_ent,status),csysid:
                  SAVE=1,PEN=coln,LEVEL=levn,BLANK=blankst,LFONT=lftab(lfontpat));
          seek(infile,actpos);
          if status = 0 then
            n_ok(typ):=n_ok(typ)+1;
          else
            n_error(typ):=n_error(typ)+1;
          endif;
!*
!***116=Point
!*
        elif typ = 116  then
          actpos:=fpos(infile);
          part(#8,igs_116(infile,logfile,rad1,rad2,ps_ptr,rowlgt,id_ent,status),csysid:
                          SAVE=1,PEN=coln,LEVEL=levn,BLANK=blankst);
          seek(infile,actpos);
          if status = 0 then
            n_ok(typ):=n_ok(typ)+1;
          else
            n_error(typ):=n_error(typ)+1;
          endif;
!*
!***120= Surface of revolution
!*  
       elif typ = 120  then
          actpos:=fpos(infile);
          part(#9,igs_120(infile,logfile,rad1,rad2,ds_ptr,ps_ptr,rowlgt,id_ent,status),csysid:
                          SAVE=1,PEN=coln,LEVEL=levn,BLANK=blankst);
          seek(infile,actpos);
          if status = 0 then
            n_ok(typ):=n_ok(typ)+1;
          else
            n_error(typ):=n_error(typ)+1;
          endif;          
!*
!***122= Tabulated cylinder
!*  
       elif typ = 122  then
          actpos:=fpos(infile);
          part(#10,igs_122(infile,logfile,rad1,rad2,ds_ptr,ps_ptr,rowlgt,id_ent,status),csysid:
                          SAVE=1,PEN=coln,LEVEL=levn,BLANK=blankst);
          seek(infile,actpos);
          if status = 0 then
            n_ok(typ):=n_ok(typ)+1;
          else
            n_error(typ):=n_error(typ)+1;
          endif;   
!*
!***126=NURB Curve
!*
        elif typ = 126  then
          actpos:=fpos(infile);
          part(#12,igs_126(infile,logfile,rad1,rad2,ps_ptr,rowlgt,id_ent,status),csysid:
                          SAVE=1,PEN=coln,LEVEL=levn,BLANK=blankst);
          seek(infile,actpos);
          if status = 0 then
            n_ok(typ):=n_ok(typ)+1;
          else
            n_error(typ):=n_error(typ)+1;
          endif;
!*
!***128=NURB Surface
!*
        elif typ = 128  then
          actpos:=fpos(infile);
          part(#13,igs_128(infile,logfile,rad1,rad2,ps_ptr,rowlgt,id_ent,status),csysid:
                          SAVE=1,PEN=coln,LEVEL=levn,BLANK=blankst);
          seek(infile,actpos);
          if status = 0 then
            n_ok(typ):=n_ok(typ)+1;
          else
            n_error(typ):=n_error(typ)+1;
          endif;
!*
!***142=Curve on a parametric surface
!*
       elif typ = 142 then
          actpos:=fpos(infile);
          part(#14,igs_142(infile,logfile,rad1,rad2,ds_ptr,ps_ptr,rowlgt,id_ent,status),csysid:
                          SAVE=1,PEN=coln,LEVEL=levn,BLANK=blankst);
          seek(infile,actpos);
          if status = 0 then
            n_ok(typ):=n_ok(typ)+1;
          else
            n_error(typ):=n_error(typ)+1;
          endif;	  
!*
!***144=Trimmed parametric Surface
!*
        elif typ = 144  then
          actpos:=fpos(infile);
          part(#15,igs_144(infile,logfile,rad1,rad2,ds_ptr,ps_ptr,rowlgt,id_ent,status),csysid:
                          SAVE=1,PEN=coln,LEVEL=levn,BLANK=blankst);
          seek(infile,actpos);
          if status = 0 then
            n_ok(typ):=n_ok(typ)+1;
          else
            n_error(typ):=n_error(typ)+1;
          endif;	  
!*
!***Not implemented entity type.
!*
        else
          n_notimpl(typ):=n_notimpl(typ)+1;
          id_ent:=##0;
        endif;
        
        IF id_ent<>##0 THEN
!*       
!*** It used for debugging......    
!---------------------------------------------------!
!         group(#15, substr(rad1,73,8), id_ent);    !
!---------------------------------------------------!       
          usedlevels(levn):=usedlevels(levn)+1;
          IF blankst=1 THEN
             n_blanked(typ):=n_blanked(typ)+1;
          ENDIF;
        ENDIF;
      ENDIF; 
!*
!***Next entity.
!*
      goto loop;
    endif;
!lst_exi();
!*
!***Write to logfilee.
!*
outlin(logfile);
outlin(logfile);
outstr(logfile,"Processed independent entities:");
outlin(logfile);
outstr(logfile,"-------------------------------------------------");
outlin(logfile);
outstr(logfile,"Entity                        Not ");
outlin(logfile);
outstr(logfile,"Type     Sucess     Error  implemented  blanked");
outlin(logfile);
outstr(logfile,"-------------------------------------------------");
outlin(logfile);
FOR i:=1 TO MAXF DO
   IF n_ok(i)+n_error(i)+n_notimpl(i) > 0 THEN
      outstr(logfile, str(i,-5,0) + str(n_ok(i),8,0) + 
             str(n_error(i),10,0) + str(n_notimpl(i),10,0) 
             + str(n_blanked(i),10,0));
      outlin(logfile);   
   ENDIF;
ENDFOR;
outstr(logfile,"------------------------------------------------");
outlin(logfile);
outlin(logfile);   
outlin(logfile);
outlin(logfile);
outstr(logfile,"Used levels:");
outlin(logfile);
outstr(logfile,"----------------------------------------");
outlin(logfile);
outstr(logfile,"Level number     Independent entities");
outlin(logfile);
outstr(logfile,"----------------------------------------");
outlin(logfile);
FOR i:=0 TO 1999 DO
   IF usedlevels(i) > 0 THEN
      outstr(logfile, str(i,-20,0) + str(usedlevels(i),8,0) );
      outlin(logfile);   
   ENDIF;
ENDFOR;
outstr(logfile,"----------------------------------------");
outlin(logfile);   

 ENDMODULE

!***********************************************************************************'